# -*- coding: utf-8 -*-
"""Chapter 8 images.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p5RLlHmZBP61GQ5D-QLtIVeXMWzil3Mv
"""

import matplotlib.pyplot as plt

# x-axis: guaranteed rate 'g'
g = [8.25, 8.26, 8.27, 8.28]

# y-axis: EPV values for different sp values
epv_sp4 = [100.1, 100.3, 100.5, 100.7]
epv_sp6 = [100.6, 100.8, 101.0, 101.2]
epv_sp8 = [101.2, 101.4, 101.6, 101.8]
epv_sp10 = [102.1, 102.3, 102.5, 102.7]

# Plot
plt.plot(g, epv_sp4, label='sp=4', linestyle='-', color='blue')
plt.plot(g, epv_sp6, label='sp=6', linestyle='--', color='blue')
plt.plot(g, epv_sp8, label='sp=8', linestyle='-.', color='blue')
plt.plot(g, epv_sp10, label='sp=10', linestyle=':', color='blue')

plt.xlabel('g')
plt.ylabel('E.P.V')
plt.title('EPV vs Guaranteed Rate (g) for different sp')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 1

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import CubicSpline

# Load the CSV data
file_path = '/content/EIA_alpha_600sim.csv'
data = pd.read_csv(file_path, skiprows=2)

# Clean and prepare data
data.columns = ['rho', 'x', 'T', 'sigma1_0.05', 'sigma1_0.10', 'sigma1_0.15',
                'sigma2_0.05', 'sigma2_0.10', 'sigma2_0.15']

# Fill NaN values in rho and x columns
data['rho'] = data['rho'].fillna(method='ffill')
data['x'] = data['x'].fillna(method='ffill')

# Create a new figure with white background
plt.figure(figsize=(7, 5))

# Define colors and styles exactly matching the image
styles = {
    0.1: {'color': 'red', 'linestyle': '-', 'label': r'$\rho = 0.1$'},
    0: {'color': 'teal', 'linestyle': '--', 'label': r'$\rho = 0$'},
    -0.1: {'color': 'navy', 'linestyle': ':', 'label': r'$\rho = -0.1$'}
}

# Create very smooth curves by using more interpolation points
for rho, style in styles.items():
    # Filter data for this rho value
    rho_data = data[data['rho'] == rho].copy()

    # Sort by T to ensure proper curve fitting
    rho_data = rho_data.sort_values('T')

    # Get unique T values and corresponding sigma1_0.10 values
    # Using sigma1_0.10 as alpha values based on the graph
    T_values = rho_data['T'].unique()
    alpha_values = rho_data.groupby('T')['sigma1_0.10'].mean().values

    # Create cubic spline for smooth interpolation
    cs = CubicSpline(T_values, alpha_values)

    # Generate many points for a smooth curve
    T_smooth = np.linspace(1.5, 8, 500)
    alpha_smooth = cs(T_smooth)

    # Plot the smooth curve
    plt.plot(T_smooth, alpha_smooth,
             color=style['color'],
             linestyle=style['linestyle'],
             linewidth=1.5,
             label=style['label'])

# Set axes labels and limits to match the image
plt.xlabel(r'$T$', fontsize=12)
plt.ylabel(r'$\alpha$', fontsize=12)
plt.xlim(1.5, 8)
plt.ylim(0.45, 0.95)

# Add grid matching the image
plt.grid(True, alpha=0.3, linestyle='-', linewidth=0.5)

# Add legend in top right corner
plt.legend(loc='upper right', framealpha=1)

plt.tight_layout()
plt.show()

#Figure 2

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

# Load the CSV data
file_path = '/content/EIA_alpha_600sim.csv'
data = pd.read_csv(file_path, skiprows=2)

# Fix column names for easier access
data.columns = [
    'rho', 'x', 'T',
    'sigma1_0.2_sigma2_0.05', 'sigma1_0.2_sigma2_0.10', 'sigma1_0.2_sigma2_0.15',
    'sigma1_0.3_sigma2_0.05', 'sigma1_0.3_sigma2_0.10', 'sigma1_0.3_sigma2_0.15'
]

# Forward fill 'rho' and 'x'
data['rho'] = data['rho'].fillna(method='ffill')
data['x'] = data['x'].fillna(method='ffill')

# Filter for rho = 0.1
block = data[data['rho'] == 0.1]

# Remove duplicate T values by averaging alpha values for duplicates
block_grouped = block.groupby('T').mean(numeric_only=True).reset_index()

# Extract T and alpha values for sigma1=0.3 and each sigma2
T = block_grouped['T'].astype(float).values
alpha_05 = block_grouped['sigma1_0.3_sigma2_0.05'].astype(float).values
alpha_10 = block_grouped['sigma1_0.3_sigma2_0.10'].astype(float).values
alpha_15 = block_grouped['sigma1_0.3_sigma2_0.15'].astype(float).values

# Sort by T to ensure smooth interpolation
sort_idx = np.argsort(T)
T = T[sort_idx]
alpha_05 = alpha_05[sort_idx]
alpha_10 = alpha_10[sort_idx]
alpha_15 = alpha_15[sort_idx]

# Create smooth T values for interpolation
T_smooth = np.linspace(T.min(), T.max(), 300)

# Spline interpolation for smooth curves (quadratic spline for 3 points)
alpha_05_smooth = make_interp_spline(T, alpha_05, k=2)(T_smooth)
alpha_10_smooth = make_interp_spline(T, alpha_10, k=2)(T_smooth)
alpha_15_smooth = make_interp_spline(T, alpha_15, k=2)(T_smooth)

# Plot
plt.figure(figsize=(7, 5))
plt.plot(T_smooth, alpha_05_smooth, color='brown', linestyle='-', linewidth=2, label=r'$\sigma_2 = 5\%$')
plt.plot(T_smooth, alpha_10_smooth, color='deepskyblue', linestyle='--', linewidth=2, label=r'$\sigma_2 = 10\%$')
plt.plot(T_smooth, alpha_15_smooth, color='black', linestyle=':', linewidth=2, label=r'$\sigma_2 = 15\%$')

plt.xlabel(r'$T$', fontsize=16)
plt.ylabel(r'$\alpha$', fontsize=16)
plt.xlim(1, 8)
plt.ylim(0.45, 1.0)
plt.legend(fontsize=14)
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

#Figure 3

import numpy as np
import matplotlib.pyplot as plt

# X-axis (Age)
ages = np.arange(40, 71, 1)

# Generate more concave and closer curves
alpha_base = 0.88
scale = 0.00008

# Using higher exponents and smaller scale differences for closer spacing
alpha_5_10 = alpha_base - scale * (ages - 40)**1.6
alpha_3_6  = alpha_base - (scale + 0.00002) * (ages - 40)**1.65
alpha_1_2  = alpha_base - (scale + 0.00005) * (ages - 40)**1.7

# Plot
plt.figure(figsize=(6, 4))

plt.plot(ages, alpha_5_10, color='brown', linestyle='-', linewidth=1.5, label='HW(.25,5,10)')
plt.plot(ages, alpha_3_6, color='steelblue', linestyle='-.', linewidth=1.5, label='HW(.25,3,6)')
plt.plot(ages, alpha_1_2, color='steelblue', linestyle='--', linewidth=2, label='HW(.25,1,2)')

plt.xlabel("Age", fontsize=12)
plt.ylabel("α", fontsize=12)
plt.xlim(40, 70)
plt.ylim(0.865, 0.882)
plt.grid(True, linestyle=':', alpha=0.6)
plt.legend(loc='upper right')
plt.tight_layout()
plt.show()

#Figure 4

import numpy as np
import matplotlib.pyplot as plt

# X-axis (Age)
ages = np.arange(40, 71, 1)

# Flatter, slightly concave curves
alpha_hawkes = 0.879 - 0.00015 * (ages - 40)**1.4
alpha_poisson = 0.878 - 0.00018 * (ages - 40)**1.45
alpha_gbm = 0.838 - 0.00022 * (ages - 40)**1.5

# Plotting
plt.figure(figsize=(6, 4))

plt.plot(ages, alpha_hawkes, color='brown', linestyle='-', linewidth=1.5, label='Hawkes')
plt.plot(ages, alpha_poisson, color='steelblue', linestyle='--', linewidth=1.8, label='Poisson')
plt.plot(ages, alpha_gbm, color='black', linestyle=':', linewidth=1.8, label='GBM')

plt.xlabel("Age", fontsize=12)
plt.ylabel("α", fontsize=12)
plt.xlim(40, 70)
plt.ylim(0.815, 0.885)
plt.grid(True, linestyle=':', alpha=0.6)
plt.legend(loc='upper right')
plt.tight_layout()
plt.show()

#Figure 5

import numpy as np
import matplotlib.pyplot as plt

# X-axis (θ)
theta = np.linspace(1.0, 1.9, 10)

# Y-values (α) – created to match concavity and vertical spacing
alpha_T3 = 0.75 - 0.01 * (theta - 1)**1.5
alpha_T5 = 0.88 - 0.015 * (theta - 1)**1.6
alpha_T7 = 0.94 - 0.02 * (theta - 1)**1.7

# Plotting
plt.figure(figsize=(6, 4))

plt.plot(theta, alpha_T3, color='brown', linestyle='-', linewidth=1.5, label='T=3')
plt.plot(theta, alpha_T5, color='steelblue', linestyle='--', linewidth=1.8, label='T=5')
plt.plot(theta, alpha_T7, color='black', linestyle=':', linewidth=1.8, label='T=7')

plt.xlabel(r'$\theta$', fontsize=12)
plt.ylabel(r'$\alpha$', fontsize=12)
plt.xlim(1.0, 1.9)
plt.ylim(0.72, 0.96)
plt.grid(True, linestyle=':', alpha=0.6)
plt.legend(loc='center right')
plt.tight_layout()
plt.show()

#Figure 6

import numpy as np
import matplotlib.pyplot as plt

# δ values (x-axis)
delta = np.linspace(1.1, 2.0, 10)

# α curves with sharper early increase and flattening later
alpha_T3 = 0.72 + 0.035 * (1 - np.exp(-1.5 * (delta - 1)))
alpha_T5 = 0.84 + 0.045 * (1 - np.exp(-1.8 * (delta - 1)))
alpha_T7 = 0.90 + 0.05  * (1 - np.exp(-2.0 * (delta - 1)))

# Plotting
plt.figure(figsize=(6, 4))

plt.plot(delta, alpha_T3, color='brown', linestyle='-', linewidth=1.5, label='T=3')
plt.plot(delta, alpha_T5, color='steelblue', linestyle='--', linewidth=1.8, label='T=5')
plt.plot(delta, alpha_T7, color='black', linestyle=':', linewidth=1.8, label='T=7')

# Labels and limits
plt.xlabel(r'$\delta$', fontsize=12)
plt.ylabel(r'$\alpha$', fontsize=12)
plt.xlim(1.1, 2.0)
plt.ylim(0.72, 0.96)

# Styling
plt.grid(True, linestyle=':', alpha=0.6)
plt.legend(loc='lower right')
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(df['Log Returns'], color='black')
plt.xlabel('Time Points')
plt.ylabel('Log Returns')
plt.title('Log Returns of S&P Composite (1970–2019)')
plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv('/content/Nikkei_1970_2019.csv')

# Ensure correct column names
df.columns = ['Name', 'Stock price']

# Drop any rows with missing or non-numeric values
df = df.dropna()
df['Stock price'] = pd.to_numeric(df['Stock price'], errors='coerce')
df = df.dropna()

# Compute log returns
log_returns = np.diff(np.log(df['Stock price'].values))

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(log_returns, color='black', linewidth=0.5)
plt.xlabel("Time Points")
plt.ylabel("Log Returns")
plt.title("")  # Keep the title empty to match the R-style plot
plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv('/MSCIworld.csv')

# Ensure correct column names (rename if needed)
df.columns = ['Name', 'Stock price']

# Calculate log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Drop missing values from log return computation
df.dropna(inplace=True)

# Plotting the log returns
plt.figure(figsize=(10, 6))
plt.plot(df['Log Returns'], color='black', linewidth=0.5)
plt.xlabel('Time Points')
plt.ylabel('Log Returns')
plt.title('')
plt.grid(False)
plt.tight_layout()

# Show the plot
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Load the data
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Drop NaN from returns
log_returns = df['Log Returns'].dropna()

# Create Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(log_returns, dist="norm", plot=plt)
plt.title("")  # To match R-style (no title)
plt.xlabel("Theoretical Quantiles")
plt.ylabel("Sample Quantiles")
plt.grid(False)  # Match the R plot style
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Load the data
df = pd.read_csv("/content/Nikkei_1970_2019.csv")  # Replace with the correct filename

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Drop NaN values
log_returns = df['Log Returns'].dropna()

# Create Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(log_returns, dist="norm", plot=plt)

# Style the plot to match R output
plt.title("")  # No title
plt.xlabel("Theoretical Quantiles")
plt.ylabel("Sample Quantiles")
plt.grid(False)  # Remove grid to match R aesthetics
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Load the data
df = pd.read_csv("/content/MSCIworld.csv")  # Replace with actual filename

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Drop NaN values from first log return
log_returns = df['Log Returns'].dropna()

# Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(log_returns, dist="norm", plot=plt)

# Style to match R aesthetics
plt.title("")  # Remove title
plt.xlabel("Theoretical Quantiles")
plt.ylabel("Sample Quantiles")
plt.grid(False)  # No grid, matches R
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load your CSV
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# Compute ACF
nlags = 40
acf_vals = acf(log_returns, nlags=nlags, fft=True)

# Compute 95% confidence interval manually: ±1.96 / sqrt(n)
n = len(log_returns)
conf_bound = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
x = np.arange(len(acf_vals))
plt.vlines(x, [0], acf_vals, color='black')  # Vertical lines
plt.hlines(0, xmin=0, xmax=nlags, color='black')  # Zero line

# Confidence intervals (dashed lines)
plt.hlines([conf_bound, -conf_bound], xmin=0, xmax=nlags, linestyles='dashed', colors='blue')

# Axes and labels
plt.xlim(-1, nlags)
plt.ylim(min(acf_vals.min(), -conf_bound) - 0.05, 1.05)
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("")  # No title, matching R default
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load Nikkei data
df = pd.read_csv("/content/Nikkei_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# Compute ACF
nlags = 40
acf_vals = acf(log_returns, nlags=nlags, fft=True)

# Confidence bounds
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
x = np.arange(len(acf_vals))
plt.vlines(x, [0], acf_vals, color='black')  # vertical bars
plt.hlines(0, xmin=0, xmax=nlags, color='black')  # zero line
plt.hlines([conf, -conf], xmin=0, xmax=nlags, colors='blue', linestyles='dashed')  # CI

# Labels and layout
plt.xlim(-1, nlags)
plt.ylim(min(acf_vals.min(), -conf) - 0.05, 1.05)
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("")  # no title
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load MSSCI data (ensure the file and column names match your dataset)
df = pd.read_csv("/content/MSCIworld.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# Compute ACF
nlags = 40
acf_vals = acf(log_returns, nlags=nlags, fft=True)

# Confidence interval
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
x = np.arange(len(acf_vals))
plt.vlines(x, 0, acf_vals, color='black')              # vertical lines
plt.hlines(0, xmin=0, xmax=nlags, color='black')       # zero line
plt.hlines([conf, -conf], xmin=0, xmax=nlags, colors='blue', linestyles='dashed')  # CI bounds

# Labels and layout
plt.xlim(-1, nlags)
plt.ylim(min(-0.05, acf_vals.min()-0.01), 1.05)
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import pacf

# Load your CSV
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# Compute PACF using Yule-Walker method (matches R default)
nlags = 40
pacf_vals = pacf(log_returns, nlags=nlags, method='yw')

# Compute 95% confidence interval manually: ±1.96 / sqrt(n)
n = len(log_returns)
conf_bound = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
x = np.arange(len(pacf_vals))
plt.vlines(x, [0], pacf_vals, color='black')  # Vertical lines
plt.hlines(0, xmin=0, xmax=nlags, color='black')  # Zero line

# Confidence intervals (dashed lines)
plt.hlines([conf_bound, -conf_bound], xmin=0, xmax=nlags, linestyles='dashed', colors='blue')

# Axes and labels
plt.xlim(-1, nlags)
plt.ylim(min(pacf_vals.min(), -conf_bound) - 0.01, max(pacf_vals.max(), conf_bound) + 0.01)
plt.xlabel("Lag")
plt.ylabel("Partial ACF")
plt.title("")  # No title, matching R default
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import pacf

# Load your S&P data (ensure 'Price' column exists)
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# PACF calculation with lag 0
nlags = 40
pacf_vals = pacf(log_returns, nlags=nlags, method='yw')

# Confidence interval (95%)
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Create PACF plot
plt.figure(figsize=(8, 6))
x = np.arange(len(pacf_vals))
plt.vlines(x, 0, pacf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')
plt.hlines([conf, -conf], xmin=0, xmax=nlags, color='blue', linestyles='dashed')

# Match the exact y-axis range seen in the uploaded image
plt.ylim(-0.03, 0.02)
plt.xlim(0, nlags)
plt.xlabel("Lag")
plt.ylabel("Partial ACF")
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import pacf

# Load your Nikkei data (ensure 'Price' column exists)
df = pd.read_csv("/content/Nikkei_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# PACF calculation with lag 0
nlags = 40
pacf_vals = pacf(log_returns, nlags=nlags, method='yw')

# Confidence interval (95%)
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Create PACF plot
plt.figure(figsize=(8, 6))
x = np.arange(len(pacf_vals))
plt.vlines(x, 0, pacf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')
plt.hlines([conf, -conf], xmin=0, xmax=nlags, color='blue', linestyles='dashed')

# Match the y-axis scale in your image
plt.ylim(-0.02, 0.02)
plt.xlim(0, nlags)
plt.xlabel("Lag")
plt.ylabel("Partial ACF")
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import pacf

# Load your MSSCI data (ensure 'Price' column exists)
df = pd.read_csv("/content/MSCIworld.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# PACF computation with lag 0
nlags = 40
pacf_vals = pacf(log_returns, nlags=nlags, method='yw')

# 95% Confidence interval
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Create PACF plot
plt.figure(figsize=(8, 6))
x = np.arange(len(pacf_vals))
plt.vlines(x, 0, pacf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')
plt.hlines([conf, -conf], xmin=0, xmax=nlags, color='blue', linestyles='dashed')

# Set axis ranges to match your target appearance
plt.ylim(-0.05, 0.15)
plt.xlim(0, nlags)
plt.xlabel("Lag")
plt.ylabel("Partial ACF")
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load S&P data (make sure to replace 'Price' with your actual column name)
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute squared log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
squared_returns = df['Log Returns'].dropna() ** 2

# ACF computation
nlags = 40
acf_vals = acf(squared_returns, nlags=nlags)

# 95% confidence interval
n = len(squared_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# Plot ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(0, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Squared Log Returns (S&P)")
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load Nikkei data (column named 'Stock price')
df = pd.read_csv("/content/Nikkei_1970_2019.csv")

# Compute squared log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
squared_returns = df['Log Returns'].dropna() ** 2

# Compute ACF
nlags = 40
acf_vals = acf(squared_returns, nlags=nlags)

# 95% confidence interval
n = len(squared_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(0, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Squared Log Returns (Nikkei)")
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load MSSCI data (column named 'Stock price')
df = pd.read_csv("/content/MSCIworld.csv")

# Compute squared log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
squared_returns = df['Log Returns'].dropna() ** 2

# Compute ACF with lag 0
nlags = 40
acf_vals = acf(squared_returns, nlags=nlags)

# 95% confidence interval
n = len(squared_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot ACF
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(0, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Squared Log Returns (MSSCI)")
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load S&P data (column named 'Stock price')
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute absolute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
abs_returns = df['Log Returns'].dropna().abs()

# Compute ACF with lag 0
nlags = 40
acf_vals = acf(abs_returns, nlags=nlags)

# 95% confidence interval
n = len(abs_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot ACF
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(-1, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Absolute Log Returns (S&P)")
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load Nikkei data (column named 'Stock price')
df = pd.read_csv("/content/Nikkei_1970_2019.csv")

# Compute absolute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
abs_returns = df['Log Returns'].dropna().abs()

# Compute ACF with lag 0
nlags = 40
acf_vals = acf(abs_returns, nlags=nlags)

# 95% confidence interval
n = len(abs_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot ACF
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(-0.5, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Absolute Log Returns (Nikkei)")
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load MSCI data (column named 'Stock price')
df = pd.read_csv("/content/MSCIworld.csv")

# Compute absolute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
abs_returns = df['Log Returns'].dropna().abs()

# Compute ACF with lag 0
nlags = 40
acf_vals = acf(abs_returns, nlags=nlags)

# 95% confidence interval
n = len(abs_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot ACF
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(-0.5, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Absolute Log Returns (MSCI)")
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_snp_cors_rate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['2%', '2.5%', '3%', '3.5%', '4%', '4.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_nikkei_cors_rate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['2%', '2.5%', '3%', '3.5%', '4%', '4.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_mssci_cors_rate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['2%', '2.5%', '3%', '3.5%', '4%', '4.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_snp_cors_grate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['5%', '5.5%', '6%', '6.5%', '7%', '7.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_nikkei_cors_grate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['5%', '5.5%', '6%', '6.5%', '7%', '7.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_mssci_cors_grate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['5%', '5.5%', '6%', '6.5%', '7%', '7.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_snp_cors_fee.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['0', '100', '200', '300', '400', '500']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_nikkei_cors_fee.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['0', '100', '200', '300', '400', '500']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_mssci_cors_fee.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['0', '100', '200', '300', '400', '500']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()