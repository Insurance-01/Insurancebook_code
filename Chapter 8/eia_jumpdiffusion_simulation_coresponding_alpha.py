# -*- coding: utf-8 -*-
"""EIA_jumpdiffusion_simulation_coresponding_alpha.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vlt-0lDXbSuKqhn7FXQ-BjUtUqjjKtzg
"""

import numpy as np
import pandas as pd
from scipy.optimize import root_scalar
from numpy.random import default_rng

rng = default_rng()

# Parameters
age = 50
maturity = 5
sigma_s = 0.2
rho1 = 0.1
r = 0.05  # Constant interest rate
lambda0 = 0.9
theta = 0
delta = 1.2195
sigma1 = sigma_s
m = 0.05
sigma = 0.03**2
rho = rho1
S0 = 1
a = 0.85837
b = 0.089102
sigma2 = 0.05  # set sigma_r here
r0 = 0.05
gamma = 0.2
g = 0.03
k = 15000  # simulations

def simulate_gbm_annual(T, mu, sigma, S0):
    steps = T + 1  # annual steps
    dt = 1
    S = np.zeros(steps)
    S[0] = S0
    for t in range(1, steps):
        Z = rng.normal()
        S[t] = S[t-1] * np.exp((mu - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z)
    return S

def CPP_t(tm, alpha):
    E = []

    for j in range(k):
        S = simulate_gbm_annual(5, m, sigma1, S0)
        fund = np.log(S)
        t = tm
        E_T = max(min(np.exp(alpha * fund[t]), np.exp(gamma * t)), np.exp(g * t))

        if j >= 5000:
            E.append(E_T)

    mean_E = np.mean(E)
    X_T = np.exp(-r * tm)
    return mean_E, X_T

# Make sure your CSV has columns like: 'qx', 'px'
prob = pd.read_csv('/content/china_mortality_2010_13.csv')
qx = prob.iloc[:, 1].values
px = prob.iloc[:, 2].values

def Ppp(alpha):
    T = maturity
    x = age
    tpx = np.cumprod(px[(x):(110)])  # index shift due to 0-based indexing

    time = np.arange(0, T+1)
    P_pp = CPP_t(1, alpha)[0] * CPP_t(1, alpha)[1] * qx[x]

    for i in range(2, len(time)):
        P_pp += (CPP_t(time[i], alpha)[0] *
                 CPP_t(time[i], alpha)[1] *
                 qx[x + time[i]] *
                 tpx[time[i] - 1])

    value = P_pp + CPP_t(T, alpha)[0] * CPP_t(T, alpha)[1] * tpx[T - 1] - 1
    return value

solution = root_scalar(Ppp, bracket=[0, 1], method='brentq')
value = solution.root
print("Optimal alpha:", value)

alphas = [value + d for d in [-0.04, -0.03, -0.02, -0.01, 0.01, 0.02, 0.03, 0.04]]
results = [(a, Ppp(a)) for a in alphas]
for a, v in results:
    print(f"Alpha: {a:.2f}, Ppp(alpha): {v:.5f}")