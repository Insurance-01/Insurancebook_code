# -*- coding: utf-8 -*-
"""paper_2_my.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_X05NYKGWMfc3N0LhJegRLt4GDO2vQTO
"""

# Import required libraries
import numpy as np
import matplotlib.pyplot as plt

# Data points
T = np.array([5, 6, 7, 8, 9, 10, 11, 12, 13, 14])
regime1 = np.array([100, 105, 110, 112, 115, 118, 122, 127, 132, 138])
regime2 = np.array([100, 108, 112, 116, 120, 124, 130, 136, 142, 150])

# Create the plot
plt.figure(figsize=(10, 6))

# Plot both lines
plt.plot(T, regime1, color='blue', label='Regime 1', marker='o')
plt.plot(T, regime2, color='orange', label='Regime 2', marker='o')

# Customize the plot
plt.xlabel('T (yrs)')
plt.ylabel('present value ($)')
plt.legend(loc='upper left')

# Set axis limits
plt.xlim(5, 15)
plt.ylim(90, 160)

# Add grid
plt.grid(True, linestyle='--', alpha=0.7)

# Show the plot
plt.show()

# Adjusting the plot to match the previous 'death' figure's style
import matplotlib.pyplot as plt

# Data
x = [10, 15, 20, 25, 30, 35, 40]
pv_5 =  [102, 103, 105, 107, 109, 112, 116]
pv_10 = [103, 104.5, 107, 109, 112, 115, 118]
pv_15 = [104, 106, 109, 112, 114, 117, 120]

# Create the plot with a larger figure size and bolder lines
plt.figure(figsize=(10, 6))

# Plot each line with a thicker linewidth and larger markers
plt.plot(x, pv_5, color='blue', label='T=5 yrs', marker='o', markersize=5, linewidth=1.5)
plt.plot(x, pv_10, color='orange', label='T=10 yrs', marker='s', markersize=5, linewidth=1.5)
plt.plot(x, pv_15, color='green', label='T=15 yrs', marker='^', markersize=5, linewidth=1.5)

# Axis labels with larger font
plt.xlabel('(%)', fontsize=11)
plt.ylabel('present value ($)', fontsize=11)

# Ticks with larger font
plt.xticks(x, fontsize=12)
plt.yticks(range(102, 121, 2), fontsize=11)

# Add grid with dashed lines for clarity
plt.grid(True, linestyle='--', alpha=0.7)

# Legend in upper left, larger font
plt.legend(loc='upper left', fontsize=11)

# Tight layout for better spacing
plt.tight_layout()

# Show the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Volatility (σ) values in percentage
sigma = np.linspace(10, 40, 100)

# Smooth convex increasing present value curves (synthetic functions)
pv_5 = 85 + 0.25 * sigma + 0.01 * sigma**2      # T = 5 yrs
pv_10 = 80 + 0.30 * sigma + 0.008 * sigma**2    # T = 10 yrs
pv_15 = 78 + 0.20 * sigma + 0.005 * sigma**2    # T = 15 yrs

# Plot
plt.figure(figsize=(8, 5))
plt.plot(sigma, pv_5, 'b--', label='T=5 yrs', linewidth=1.5)
plt.plot(sigma, pv_10, 'g-', label='T=10 yrs', linewidth=1.5)
plt.plot(sigma, pv_15, 'r:', label='T=15 yrs', linewidth=1.5)

# Axis labels with LaTeX-style math
plt.xlabel(r'$\sigma$ (%)', fontsize=11)
plt.ylabel('present value ($)', fontsize=11)

# Ticks and grid
plt.xticks(np.arange(10, 45, 5))
plt.yticks(np.arange(80, 125, 10))
plt.grid(True)

# Legend and layout
plt.legend(fontsize=11)
plt.tight_layout()
plt.show()
plt.savefig('present_value_plot.png', dpi=300)

# Download the figure
from google.colab import files
files.download('present_value_plot.png')

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Create σ₁ (volatility) and r₁ (interest rate) ranges
sigma1 = np.linspace(10, 50, 100)  # in %
r1 = np.linspace(1, 5, 100)        # in %

# Meshgrid for surface plot
Sigma1, R1 = np.meshgrid(sigma1, r1)

# Define synthetic present value surface
PV = 125 - 0.3 * Sigma1 - 5 * np.log(R1)

# Create the 3D plot
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Plot surface with color mapped to r₁ values
surf = ax.plot_surface(Sigma1, R1, PV, facecolors=plt.cm.jet((R1 - R1.min()) / (R1.max() - R1.min())),
                       rstride=1, cstride=1, linewidth=0, antialiased=False)

# Customize axes
ax.set_xlabel(r'$\sigma_1$ (%)', fontsize=12)
ax.set_ylabel(r'$r_1$ (%)', fontsize=12)
ax.set_zlabel('present value ($)', fontsize=12)
ax.view_init(elev=30, azim=135)  # Adjust angle to match the figure's perspective

# Add colorbar representing r₁ (%)
mappable = plt.cm.ScalarMappable(cmap='jet')
mappable.set_array(r1)
cbar = fig.colorbar(mappable, ax=ax, shrink=0.6, pad=0.1)
cbar.set_label(r'$r_1$ (%)', fontsize=12)

plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Simulated time and probabilities (replace with actual data if available)
time = np.arange(0, 5000)
bull_prob = np.random.rand(len(time)) ** 3  # simulate convex shape
bear_prob = 1 - bull_prob

# Plot
plt.figure(figsize=(12, 5))
plt.plot(time, bull_prob, 'k-', label='Bull')  # black solid
plt.plot(time, bear_prob, color='brown', linestyle='--', label='Bear')  # pink/brown dashed
plt.xlabel("Time(days)", fontsize=12)
plt.ylabel("Probability", fontsize=12)
plt.ylim(0, 1.05)
plt.legend()
plt.tight_layout()
plt.show()
plt.savefig('bull_bear_probabilities.png', dpi=300)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Generate synthetic returns and dates (replace with your real data)
np.random.seed(0)
dates = pd.date_range(start="2000-01-03", periods=6000, freq='B')
returns = np.random.normal(0, 0.01, size=len(dates))

# Plot
plt.figure(figsize=(14, 5))
plt.plot(dates, returns, color='black', linewidth=0.5)
plt.ylabel("Returns(%)", fontsize=12)
plt.xticks(fontsize=10, rotation=45)
plt.grid(True, axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()
plt.savefig('returns_plot.png', dpi=300)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Simulated regime state (1 or 2)
time = np.arange(0, 6000)
regime = np.ones_like(time)
switch_points = np.random.choice(time, size=30, replace=False)
switch_points.sort()
for i, idx in enumerate(switch_points):
    regime[idx:] = 2 if i % 2 == 0 else 1

# Plot
plt.figure(figsize=(12, 4))
plt.plot(time, regime, drawstyle='steps-post', color='black')
plt.xlabel("Time(days)", fontsize=12)
plt.ylabel("Regime", fontsize=12)
plt.yticks([1, 2])
plt.tight_layout()
plt.show()
plt.savefig('regime_plot.png', dpi=300)
plt.show()

from google.colab import files
files.download('bull_bear_probabilities.png')
files.download('returns_plot.png')
files.download('regime_plot.png')

import numpy as np
import matplotlib.pyplot as plt

# Time range
x_years = np.linspace(5, 15, 200)

# Inverse function parameters
a = 90
b = 350

def inverse_curve(G):
    return G * (a + b / x_years)

# Calculate prices for each G value
curve_1 = inverse_curve(1.00)
curve_099 = inverse_curve(0.99)
curve_098 = inverse_curve(0.98)

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(x_years, curve_1, color='blue', label='G=100 F(0)')
plt.plot(x_years, curve_099,  color='red', label='G=0.99 F(0)')
plt.plot(x_years, curve_098,  color='green', label='G=0.98 F(0)')

plt.xlabel('Time (years)')
plt.ylabel('Price (INR)')
plt.title('')
plt.ylim(90, 160)
plt.xlim(5, 15)
plt.grid(True, alpha=0.3)
plt.legend(loc='upper right')
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# X-axis (Age)
ages = np.arange(40, 71, 1)  # includes 70

# Concave, close curves
alpha_base = 0.88
scale = 0.00008

# Concave shapes with slightly different decay rates
alpha_5_10 = alpha_base - scale * (ages - 40)**1.7
alpha_3_6  = alpha_base - (scale + 0.00001) * (ages - 40)**1.75
alpha_1_2  = alpha_base - (scale + 0.000025) * (ages - 40)**1.8

# Plotting
plt.figure(figsize=(6, 4))

plt.plot(ages, alpha_5_10, color='brown', linestyle='-', linewidth=1.5, label='HW(.25,5,10)')
plt.plot(ages, alpha_3_6, color='steelblue', linestyle='-.', linewidth=1.5, label='HW(.25,3,6)')
plt.plot(ages, alpha_1_2, color='steelblue', linestyle='--', linewidth=2, label='HW(.25,1,2)')

plt.xlabel("Age", fontsize=12)
plt.ylabel("α", fontsize=12)
plt.xlim(40, 70)  # Ensure axis goes till 70
plt.ylim(0.865, 0.882)
plt.grid(True, linestyle=':', alpha=0.6)
plt.legend(loc='upper right')
plt.tight_layout()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

# Original time data
years = np.array([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])

# Increased scaling constants to create more spacing
k_g100 = 1050  # Increased from 850
k_g099 = 900   # Increased from 825
k_g098 = 750   # Increased from 800 (kept smaller to push lower)

# Inverse relationship: price = k / time
price_g100_inv = k_g100 / years
price_g099_inv = k_g099 / years
price_g098_inv = k_g098 / years

# Spline interpolation for smooth curves
x_smooth = np.linspace(years.min(), years.max(), 300)
spline_g100 = make_interp_spline(years, price_g100_inv, k=3)
spline_g099 = make_interp_spline(years, price_g099_inv, k=3)
spline_g098 = make_interp_spline(years, price_g098_inv, k=3)

y_smooth_g100 = spline_g100(x_smooth)
y_smooth_g099 = spline_g099(x_smooth)
y_smooth_g098 = spline_g098(x_smooth)

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(x_smooth, y_smooth_g100, color='blue', linewidth=1.5, label='G=100F(0)')
plt.plot(x_smooth, y_smooth_g099, color='red', linewidth=1.5, label='G=0.99F(0)')
plt.plot(x_smooth, y_smooth_g098, color='green', linewidth=1.5, label='G=0.98F(0)')
plt.xlabel('Time (years)', fontsize=11)
plt.ylabel('Price (INR)', fontsize=11)
plt.title('', fontsize=14)
plt.legend()
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()