# -*- coding: utf-8 -*-
"""EPV_GARCH_function_of_age.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xDiRwJA_54aFimuGlNcQclzaXGTzlm3n
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def present_value(cash_flows, time_ids, interest_rate):
    return np.sum(cash_flows / ((1 + interest_rate) ** np.array(time_ids)))

def value(d, grate, age, rate, sigma_file, prob_file):
    N = 10000
    s0 = 100

    sigma = pd.read_csv(sigma_file).iloc[:, 1].values.astype(float)
    prob = pd.read_csv(prob_file).iloc[:110, [1, 2]].values
    qx = prob[:, 0]
    px = prob[:, 1]

    x = age
    l = 110 - x
    tpx = np.cumprod(px[(x):(len(px))])
    tdeferred_qx = np.zeros(l)
    tdeferred_qx[0] = qx[x]
    tdeferred_qx[1:] = tpx[:-1] * qx[(x+1):]

    var = sigma**2
    irate = rate / 100
    intrate = np.log(1 + irate)
    k = len(var)

    returns = np.random.normal(loc=intrate / 252 - var / 2, scale=np.sqrt(var[:, None]), size=(k, N))
    stock = np.zeros((k + 1, N))
    stock[0, :] = s0
    for i in range(k):
        stock[i + 1, :] = stock[i, :] * np.exp(returns[i, :])

    stock = stock[::252, :]
    l = stock.shape[0]
    g = grate * s0 / 100

    fund = np.zeros((l, N))
    fund[0, :] = stock[0, :]
    for i in range(1, l):
        fund[i - 1, :] *= (1 - d / 10000)
        fund[i, :] = fund[i - 1, :] * (stock[i, :] / stock[i - 1, :]) - g

    fund[fund < 0] = 0

    m = len(tpx)
    l = min(l, m)
    expected_value = np.mean(fund[:l, :], axis=1) * tdeferred_qx[:l]
    guaranteed_annuity = tpx[:l] * g
    times = np.arange(1, l + 1)

    PV1 = present_value(expected_value, times, irate)
    PV2 = present_value(guaranteed_annuity, times, irate)

    return PV1 + PV2

def run_simulations(sigma_file, prob_file, name_prefix):
    age = np.arange(60, 88, 2)
    d = np.arange(0, 601, 100)
    grate = np.arange(5, 8.5, 0.5)
    rate = np.arange(2, 5.5, 0.5)

    k = len(d)
    l = len(age)

    EPV_d = np.zeros((l, k))
    EPV_grate = np.zeros((l, k))
    EPV_rate = np.zeros((l, k))

    for i in range(k):
        for j in range(l):
            EPV_d[j, i] = value(d[i], 6, age[j], 3, sigma_file, prob_file)
            EPV_grate[j, i] = value(200, grate[i], age[j], 3, sigma_file, prob_file)
            EPV_rate[j, i] = value(200, 6, age[j], rate[i], sigma_file, prob_file)

    pd.DataFrame(EPV_d, columns=d).to_csv(f'EPV_{name_prefix}_cors_fee.csv', index=False)
    pd.DataFrame(EPV_grate, columns=grate).to_csv(f'EPV_{name_prefix}_cors_grate.csv', index=False)
    pd.DataFrame(EPV_rate, columns=rate).to_csv(f'EPV_{name_prefix}_cors_rate.csv', index=False)

run_simulations("/content/sigma_nikkei.csv", "/content/japan_combined_mortality.csv", "nikkei")
run_simulations("/content/sigma_snp.csv", "/content/us_combined_mortality.csv", "snp")
run_simulations("path_to/sigma_msci.csv", "path_to/us_combined_mortality.csv", "msci")