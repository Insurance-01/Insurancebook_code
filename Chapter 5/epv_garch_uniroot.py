# -*- coding: utf-8 -*-
"""EPV GARCH uniroot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ISq8Oy1WUpchLGzvPDas0Dh7zhHMDPMh
"""

import numpy as np
import pandas as pd

def present_value(cash_flows, time_ids, interest_rate):
    """Computes the present value of cash flows."""
    return np.sum(np.array(cash_flows) / (1 + interest_rate) ** np.array(time_ids))

def value(rate, grate, age, fee,
          sigma_path="/content/sigma_nikkei.csv",
          mortality_path="/content/japan_combined_mortality.csv",
          n_simulations=1000):
    r = rate
    x = age
    d = fee
    s0 = 100
    l = 110 - x

    sigma = pd.read_csv(sigma_path)
    prob = pd.read_csv(mortality_path)

    b = sigma.iloc[:, 1].astype(float).values
    var = b ** 2
    int_rate = np.log(1 + r)

    k = len(var)
    returns = np.zeros((k, n_simulations))
    stock = np.zeros((k + 1, n_simulations))

    for i in range(k):
        returns[i, :] = np.random.normal(int_rate / 252 - var[i] / 2, np.sqrt(var[i]), size=n_simulations)

    stock[0, :] = s0
    for i in range(k):
        stock[i + 1, :] = stock[i, :] * np.exp(returns[i, :])

    stock = stock[::252]  # Select yearly stock values
    g = grate * s0 / 100

    fund = np.zeros((l, n_simulations))
    fund[0, :] = stock[0, :]

    for i in range(1, l):
        fund[i - 1, :] *= (1 - d / 10000)
        fund[i, :] = fund[i - 1, :] * (stock[i, :] / stock[i - 1, :]) - g

    fund = np.maximum(fund, 0)
    expected_value = np.mean(fund, axis=1)

    qx = prob.iloc[:110, 1].values
    px = prob.iloc[:110, 2].values

    tpx = np.cumprod(px[x:110])
    tdeferred_qx = np.zeros(l)
    tdeferred_qx[0] = qx[x]
    min_len = min(len(tpx) - 1, len(qx[(x + 1):]) - 1)
    tdeferred_qx[1:min_len+1] = tpx[:min_len] * qx[(x + 2):(x + 2 + min_len)]

    expected_value = expected_value[:l] * tdeferred_qx[:l]
    guaranteed_annuity = tpx[:l] * g

    time_ids = np.arange(1, l + 1)
    PV1 = present_value(expected_value, time_ids, r)
    PV2 = present_value(guaranteed_annuity, time_ids, r)
    return PV1 + PV2

rate = 0.03
age = 60
grate = 6
fee = 0

base_value = value(rate, grate, age, fee)
print("Base contract value (no fee) - 100 = ", base_value - 100)

fees = np.arange(0, 501, 10)
values = np.array([value(rate, grate, age, d) for d in fees])

# Save or plot
import matplotlib.pyplot as plt

plt.plot(fees, values - 100)
plt.xlabel("Fee (in basis points)")
plt.ylabel("Contract Value - 100")
plt.title("Contract Value vs. Fee")
plt.grid(True)
plt.show()