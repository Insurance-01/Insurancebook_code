# -*- coding: utf-8 -*-
"""EPV_cors_fee_GARCH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CTuyrvaMzw-NlIJNvrZpQmtwqe7Qxd-m
"""

import numpy as np
import pandas as pd

def present_value(cash_flows, time_ids, interest_rate):
    """Compute present value of future cash flows."""
    discount_factors = 1 / (1 + interest_rate) ** np.array(time_ids)
    return np.sum(cash_flows * discount_factors)

# Replace these with your actual paths or mount Google Drive if needed
sigma = pd.read_csv("/content/sigma_nikkei.csv")
prob = pd.read_csv("/content/japan_combined_mortality.csv")

rate = 0.03
age = 60
grate = 6
fee = 0
r = rate
x = age
d = fee
s0 = 100
l = 110 - x
b = sigma.iloc[:, 1].astype(float).values
var = b ** 2
int_rate = np.log(1 + r)
k = len(var)
n_sim = 1000

returns = np.zeros((k, n_sim))
stock = np.zeros((k + 1, n_sim))
for i in range(k):
    returns[i, :] = np.random.normal(int_rate / 252 - var[i] / 2, np.sqrt(var[i]), size=n_sim)

stock[0, :] = s0
for i in range(k):
    stock[i + 1, :] = stock[i, :] * np.exp(returns[i, :])

# Keep only yearly stock values (assuming 252 trading days per year)
stock = stock[::252]

g = grate * s0 / 100
fund = np.zeros((l, n_sim))

fund[0, :] = stock[0, :]
for i in range(1, l):
    fund[i - 1, :] = fund[i - 1, :] * (1 - d / 10000)
    fund[i, :] = fund[i - 1, :] * (stock[i, :] / stock[i - 1, :]) - g

fund = np.maximum(fund, 0)

PV1 = np.zeros(n_sim)
PV2 = np.zeros(n_sim)
PV = np.zeros(n_sim)

qx = prob.iloc[0:110, 1].values
px = prob.iloc[0:110, 2].values

for i in range(n_sim):
    tpx = np.zeros(110 - x + 1)
    tpx[0] = 1
    tpx[1:] = np.cumprod(px[x:])

    tdeferred_qx = tpx[:-1] * qx[x:]
    times = np.arange(1, 110 - x + 1)

    expected_value = fund[:l, i] * tdeferred_qx[:l]
    guaranteed_annuity = tpx[1:l] * g

    p1 = present_value(expected_value, times, r)
    p2 = present_value(guaranteed_annuity, times[1:], r)

    PV1[i] = p1
    PV2[i] = p2
    PV[i] = p1 + p2

print("Average Present Value of Contract:", np.mean(PV))
print("Standard Deviation of Contract Value:", np.std(PV))