# -*- coding: utf-8 -*-
"""fitted_sGARCH_wholedata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hAbqz-A4u-huHl4hnZzgSwTMHaN9vYZk
"""

!pip install arch statsmodels scipy matplotlib seaborn yfinance

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from scipy.stats import skew, kurtosis, jarque_bera
from statsmodels.tsa.stattools import adfuller, acf, pacf
from statsmodels.stats.diagnostic import het_arch
from arch import arch_model

data1 = pd.read_csv("/content/Nikkei_1970_2019.csv")
data2 = pd.read_csv("/content/S&P_composite_1970_2019.csv")
data3 = pd.read_csv("/content/MSCIworld.csv")

returns1 = np.diff(np.log(data1.iloc[:, 1].dropna()))
returns2 = np.diff(np.log(data2.iloc[:, 1].dropna()))
returns3 = np.diff(np.log(data3.iloc[:, 1].dropna()))

def fit_garch_model(returns):
    model = arch_model(returns, vol='Garch', p=1, q=1, dist='normal', rescale=False)
    result = model.fit(disp='off')
    return result

model1 = fit_garch_model(returns1)
model2 = fit_garch_model(returns2)
model3 = fit_garch_model(returns3)

resid1 = model1.std_resid
resid2 = model2.std_resid
resid3 = model3.std_resid

def compute_statistics(returns):
    adf_p = adfuller(returns)[1]
    jb_p = jarque_bera(returns)[1]
    arch_p = het_arch(returns, maxlag=12)[1]

    return [
        np.mean(returns), np.min(returns), np.max(returns), np.std(returns),
        skew(returns), kurtosis(returns), adf_p, jb_p, arch_p
    ]

stat1 = compute_statistics(returns1)
stat2 = compute_statistics(returns2)
stat3 = compute_statistics(returns3)

stats_df = pd.DataFrame([stat1, stat2, stat3], columns=[
    'Mean', 'Min', 'Max', 'SD', 'Skewness', 'Kurtosis', 'ADF_p', 'JB_p', 'ARCH_p'
])

stats_df.to_csv("nikkei_snp_msci_statistics.csv", index=False)

pd.Series(model1.conditional_volatility).to_csv("sigma_nikkei_garch.csv", index=False)
pd.Series(model2.conditional_volatility).to_csv("sigma_snp_garch.csv", index=False)
pd.Series(model3.conditional_volatility).to_csv("sigma_msci_garch.csv", index=False)

lags = [1, 5, 12, 50, 120]
arch_table = []

for lag in lags:
    p1 = het_arch(returns1, maxlag=lag)[1]
    p2 = het_arch(returns2, maxlag=lag)[1]
    p3 = het_arch(returns3, maxlag=lag)[1]
    arch_table.append([lag, p1, p2, p3])

arch_df = pd.DataFrame(arch_table, columns=['Lag', 'Nikkei_p', 'S&P_p', 'MSCI_p'])
arch_df.to_csv("Arch_test_nikkei_snp_msci_whole_data.csv", index=False)

def plot_ts(data, title, ylabel):
    plt.figure(figsize=(10, 4))
    plt.plot(data)
    plt.title(title)
    plt.ylabel(ylabel)
    plt.xlabel("Time Points")
    plt.grid(True)
    plt.show()

# Log returns
plot_ts(returns1, "Nikkei Returns", "Log Returns")
plot_ts(returns2, "S&P Returns", "Log Returns")
plot_ts(returns3, "MSCI Returns", "Log Returns")

# Squared returns
plot_ts(returns1**2, "Nikkei Squared Returns", "Squared Returns")
plot_ts(returns2**2, "S&P Squared Returns", "Squared Returns")
plot_ts(returns3**2, "MSCI Squared Returns", "Squared Returns")

# Absolute returns
plot_ts(np.abs(returns1), "Nikkei Absolute Returns", "Absolute Returns")
plot_ts(np.abs(returns2), "S&P Absolute Returns", "Absolute Returns")
plot_ts(np.abs(returns3), "MSCI Absolute Returns", "Absolute Returns")