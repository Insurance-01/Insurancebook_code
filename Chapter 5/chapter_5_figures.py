# -*- coding: utf-8 -*-
"""Chapter 5 Figures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tLPem18uztIUImedgUtedagBptRccQiI
"""

#Figure 1(a)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(df['Log Returns'], color='black')
plt.xlabel('Time Points')
plt.ylabel('Log Returns')
plt.title('Log Returns of S&P Composite (1970–2019)')
plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 1(b)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv('/content/Nikkei_1970_2019.csv')

# Ensure correct column names
df.columns = ['Name', 'Stock price']

# Drop any rows with missing or non-numeric values
df = df.dropna()
df['Stock price'] = pd.to_numeric(df['Stock price'], errors='coerce')
df = df.dropna()

# Compute log returns
log_returns = np.diff(np.log(df['Stock price'].values))

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(log_returns, color='black', linewidth=0.5)
plt.xlabel("Time Points")
plt.ylabel("Log Returns")
plt.title("")  # Keep the title empty to match the R-style plot
plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 1(c)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the CSV file
df = pd.read_csv('/content/MSCIworld.csv')

# Ensure correct column names (rename if needed)
df.columns = ['Name', 'Stock price']

# Calculate log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Drop missing values from log return computation
df.dropna(inplace=True)

# Plotting the log returns
plt.figure(figsize=(10, 6))
plt.plot(df['Log Returns'], color='black', linewidth=0.5)
plt.xlabel('Time Points')
plt.ylabel('Log Returns')
plt.title('')
plt.grid(False)
plt.tight_layout()

# Show the plot
plt.show()

#Figure 2(a)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Load the data
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Drop NaN from returns
log_returns = df['Log Returns'].dropna()

# Create Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(log_returns, dist="norm", plot=plt)
plt.title("")  # To match R-style (no title)
plt.xlabel("Theoretical Quantiles")
plt.ylabel("Sample Quantiles")
plt.grid(False)  # Match the R plot style
plt.tight_layout()
plt.show()

#Figure 2(b)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Load the data
df = pd.read_csv("/content/Nikkei_1970_2019.csv")  # Replace with the correct filename

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Drop NaN values
log_returns = df['Log Returns'].dropna()

# Create Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(log_returns, dist="norm", plot=plt)

# Style the plot to match R output
plt.title("")  # No title
plt.xlabel("Theoretical Quantiles")
plt.ylabel("Sample Quantiles")
plt.grid(False)  # Remove grid to match R aesthetics
plt.tight_layout()
plt.show()

#Figure 2(c)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Load the data
df = pd.read_csv("/content/MSCIworld.csv")  # Replace with actual filename

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))

# Drop NaN values from first log return
log_returns = df['Log Returns'].dropna()

# Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(log_returns, dist="norm", plot=plt)

# Style to match R aesthetics
plt.title("")  # Remove title
plt.xlabel("Theoretical Quantiles")
plt.ylabel("Sample Quantiles")
plt.grid(False)  # No grid, matches R
plt.tight_layout()
plt.show()

#Figure 3(a)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load your CSV
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# Compute ACF
nlags = 40
acf_vals = acf(log_returns, nlags=nlags, fft=True)

# Compute 95% confidence interval manually: ±1.96 / sqrt(n)
n = len(log_returns)
conf_bound = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
x = np.arange(len(acf_vals))
plt.vlines(x, [0], acf_vals, color='black')  # Vertical lines
plt.hlines(0, xmin=0, xmax=nlags, color='black')  # Zero line

# Confidence intervals (dashed lines)
plt.hlines([conf_bound, -conf_bound], xmin=0, xmax=nlags, linestyles='dashed', colors='blue')

# Axes and labels
plt.xlim(-1, nlags)
plt.ylim(min(acf_vals.min(), -conf_bound) - 0.05, 1.05)
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("")  # No title, matching R default
plt.tight_layout()
plt.show()

#Figure 3(b)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load Nikkei data
df = pd.read_csv("/content/Nikkei_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# Compute ACF
nlags = 40
acf_vals = acf(log_returns, nlags=nlags, fft=True)

# Confidence bounds
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
x = np.arange(len(acf_vals))
plt.vlines(x, [0], acf_vals, color='black')  # vertical bars
plt.hlines(0, xmin=0, xmax=nlags, color='black')  # zero line
plt.hlines([conf, -conf], xmin=0, xmax=nlags, colors='blue', linestyles='dashed')  # CI

# Labels and layout
plt.xlim(-1, nlags)
plt.ylim(min(acf_vals.min(), -conf) - 0.05, 1.05)
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("")  # no title
plt.tight_layout()
plt.show()

#Figure 3(c)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load MSSCI data (ensure the file and column names match your dataset)
df = pd.read_csv("/content/MSCIworld.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# Compute ACF
nlags = 40
acf_vals = acf(log_returns, nlags=nlags, fft=True)

# Confidence interval
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
x = np.arange(len(acf_vals))
plt.vlines(x, 0, acf_vals, color='black')              # vertical lines
plt.hlines(0, xmin=0, xmax=nlags, color='black')       # zero line
plt.hlines([conf, -conf], xmin=0, xmax=nlags, colors='blue', linestyles='dashed')  # CI bounds

# Labels and layout
plt.xlim(-1, nlags)
plt.ylim(min(-0.05, acf_vals.min()-0.01), 1.05)
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.tight_layout()
plt.show()

#Figure 4(a)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import pacf

# Load your S&P data (ensure 'Price' column exists)
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# PACF calculation with lag 0
nlags = 40
pacf_vals = pacf(log_returns, nlags=nlags, method='yw')

# Confidence interval (95%)
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Create PACF plot
plt.figure(figsize=(8, 6))
x = np.arange(len(pacf_vals))
plt.vlines(x, 0, pacf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')
plt.hlines([conf, -conf], xmin=0, xmax=nlags, color='blue', linestyles='dashed')

# Match the exact y-axis range seen in the uploaded image
plt.ylim(-0.03, 0.02)
plt.xlim(0, nlags)
plt.xlabel("Lag")
plt.ylabel("Partial ACF")
plt.tight_layout()
plt.show()

#Figure 4(b)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import pacf

# Load your Nikkei data (ensure 'Price' column exists)
df = pd.read_csv("/content/Nikkei_1970_2019.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# PACF calculation with lag 0
nlags = 40
pacf_vals = pacf(log_returns, nlags=nlags, method='yw')

# Confidence interval (95%)
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Create PACF plot
plt.figure(figsize=(8, 6))
x = np.arange(len(pacf_vals))
plt.vlines(x, 0, pacf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')
plt.hlines([conf, -conf], xmin=0, xmax=nlags, color='blue', linestyles='dashed')

# Match the y-axis scale in your image
plt.ylim(-0.02, 0.02)
plt.xlim(0, nlags)
plt.xlabel("Lag")
plt.ylabel("Partial ACF")
plt.tight_layout()
plt.show()

#Figure 4(c)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import pacf

# Load your MSSCI data (ensure 'Price' column exists)
df = pd.read_csv("/content/MSCIworld.csv")

# Compute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
log_returns = df['Log Returns'].dropna()

# PACF computation with lag 0
nlags = 40
pacf_vals = pacf(log_returns, nlags=nlags, method='yw')

# 95% Confidence interval
n = len(log_returns)
conf = 1.96 / np.sqrt(n)

# Create PACF plot
plt.figure(figsize=(8, 6))
x = np.arange(len(pacf_vals))
plt.vlines(x, 0, pacf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')
plt.hlines([conf, -conf], xmin=0, xmax=nlags, color='blue', linestyles='dashed')

# Set axis ranges to match your target appearance
plt.ylim(-0.05, 0.15)
plt.xlim(0, nlags)
plt.xlabel("Lag")
plt.ylabel("Partial ACF")
plt.tight_layout()
plt.show()

#Figure 5(a)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load S&P data (make sure to replace 'Price' with your actual column name)
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute squared log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
squared_returns = df['Log Returns'].dropna() ** 2

# ACF computation
nlags = 40
acf_vals = acf(squared_returns, nlags=nlags)

# 95% confidence interval
n = len(squared_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# Plot ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(0, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Squared Log Returns (S&P)")
plt.tight_layout()
plt.show()

#Figure 5(b)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load Nikkei data (column named 'Stock price')
df = pd.read_csv("/content/Nikkei_1970_2019.csv")

# Compute squared log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
squared_returns = df['Log Returns'].dropna() ** 2

# Compute ACF
nlags = 40
acf_vals = acf(squared_returns, nlags=nlags)

# 95% confidence interval
n = len(squared_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(0, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Squared Log Returns (Nikkei)")
plt.tight_layout()
plt.show()

#Figure 5(c)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load MSSCI data (column named 'Stock price')
df = pd.read_csv("/content/MSCIworld.csv")

# Compute squared log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
squared_returns = df['Log Returns'].dropna() ** 2

# Compute ACF with lag 0
nlags = 40
acf_vals = acf(squared_returns, nlags=nlags)

# 95% confidence interval
n = len(squared_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot ACF
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(0, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Squared Log Returns (MSSCI)")
plt.tight_layout()
plt.show()

#Figure 6(a)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load S&P data (column named 'Stock price')
df = pd.read_csv("/content/S&P_composite_1970_2019.csv")

# Compute absolute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
abs_returns = df['Log Returns'].dropna().abs()

# Compute ACF with lag 0
nlags = 40
acf_vals = acf(abs_returns, nlags=nlags)

# 95% confidence interval
n = len(abs_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot ACF
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(-1, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Absolute Log Returns (S&P)")
plt.tight_layout()
plt.show()

#Figure 6(b)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load Nikkei data (column named 'Stock price')
df = pd.read_csv("/content/Nikkei_1970_2019.csv")

# Compute absolute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
abs_returns = df['Log Returns'].dropna().abs()

# Compute ACF with lag 0
nlags = 40
acf_vals = acf(abs_returns, nlags=nlags)

# 95% confidence interval
n = len(abs_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot ACF
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(-0.5, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Absolute Log Returns (Nikkei)")
plt.tight_layout()
plt.show()

#Figure 6(c)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import acf

# Load MSCI data (column named 'Stock price')
df = pd.read_csv("/content/MSCIworld.csv")

# Compute absolute log returns
df['Log Returns'] = np.log(df['Stock price'] / df['Stock price'].shift(1))
abs_returns = df['Log Returns'].dropna().abs()

# Compute ACF with lag 0
nlags = 40
acf_vals = acf(abs_returns, nlags=nlags)

# 95% confidence interval
n = len(abs_returns)
conf_interval = 1.96 / np.sqrt(n)

# Plot ACF
plt.figure(figsize=(8, 6))
lags = np.arange(len(acf_vals))

# ACF bars
plt.vlines(lags, 0, acf_vals, color='black')
plt.hlines(0, xmin=0, xmax=nlags, color='black')

# Confidence interval lines
plt.hlines(conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)
plt.hlines(-conf_interval, 0, nlags, colors='blue', linestyles='dashed', linewidth=1.2)

# Axis settings
plt.ylim(-0.03, 0.4)
plt.xlim(-0.5, nlags)
plt.xticks(np.arange(0, nlags + 1, 10))
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.title("ACF of Absolute Log Returns (MSCI)")
plt.tight_layout()
plt.show()

#Figure 7(a)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_snp_cors_rate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['2%', '2.5%', '3%', '3.5%', '4%', '4.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age (S&P)")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 7(b)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_nikkei_cors_rate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['2%', '2.5%', '3%', '3.5%', '4%', '4.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age (Nikkei)")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 7(c)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_mssci_cors_rate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['2%', '2.5%', '3%', '3.5%', '4%', '4.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age (MSCI)")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 8(a)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_snp_cors_grate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['5%', '5.5%', '6%', '6.5%', '7%', '7.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age (S&P)")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 8(b)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_nikkei_cors_grate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['5%', '5.5%', '6%', '6.5%', '7%', '7.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age (Nikkei)")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 8(c)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_mssci_cors_grate.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['5%', '5.5%', '6%', '6.5%', '7%', '7.5%']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age (MSCI)")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 9(a)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_snp_cors_fee.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['0', '100', '200', '300', '400', '500']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age (S&P)")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 9(b)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_nikkei_cors_fee.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['0', '100', '200', '300', '400', '500']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age (Nikkei)")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 9(c)

import pandas as pd
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv("/content/EPV_mssci_cors_fee.csv")  # Make sure this file is in your working directory

# Define the age range (assumes starting at age 61)
ages = list(range(61, 61 + len(df)))

# Select columns for 2% to 4.5% (assuming 6 columns in this order)
epv_data = df.iloc[:, 1:7]
epv_data.columns = ['0', '100', '200', '300', '400', '500']

# Define styles
line_styles = ['-', '--', '-.', ':', (0, (5, 5)), (0, (3, 1, 1, 1))]
colors = ['blue', 'green', 'red', 'purple', 'orange', 'brown']

# Create plot
plt.figure(figsize=(10, 6))
for column, style, color in zip(epv_data.columns, line_styles, colors):
    plt.plot(ages, epv_data[column], linestyle=style, color=color, label=column)

# Labels and styling
plt.xlabel("Age")
plt.ylabel("E(PV)")
plt.legend(title="Interest Rate")
plt.title("Expected Present Value vs Age (MSCI)")

# Box around the plot
ax = plt.gca()
for spine in ax.spines.values():
    spine.set_visible(True)
    spine.set_linewidth(1.5)

plt.grid(False)
plt.tight_layout()
plt.show()

#Figure 10(a)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# g values
g = np.linspace(10.91, 10.95, 100)

# Define accurate EPV values
epv_10 = np.linspace(99.30, 99.63, 100)
epv_4  = np.linspace(99.45, 99.80, 100)
epv_6  = np.linspace(99.63, 100.00, 100)
epv_8  = np.linspace(99.83, 100.25, 100)

# Create DataFrame
df = pd.DataFrame({
    'g': np.tile(g, 4),
    'EPV': np.concatenate([epv_10, epv_4, epv_6, epv_8]),
    'Label': ['sp=10'] * 100 + ['sp=4'] * 100 + ['sp=6'] * 100 + ['sp=8'] * 100
})

# Define colors for each line
color_map = {
    'sp=10': 'blue',
    'sp=4': 'green',
    'sp=6': 'orange',
    'sp=8': 'red'
}

# Plot
plt.figure(figsize=(10, 6))

for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['EPV'],
             linestyle='-',  # solid lines only
             color=color_map[label],
             label=label)

# Axis labels and legend
plt.xlabel('g')
plt.ylabel('E.P.V')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figire 10(b)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# g values
g = np.linspace(10.91, 10.95, 100)

# Define accurate EPV values
epv_10 = np.linspace(99.30, 99.63, 100)
epv_4  = np.linspace(99.45, 99.80, 100)
epv_6  = np.linspace(99.63, 100.00, 100)
epv_8  = np.linspace(99.83, 100.25, 100)

# Create DataFrame
df = pd.DataFrame({
    'g': np.tile(g, 4),
    'EPV': np.concatenate([epv_10, epv_4, epv_6, epv_8]),
    'Label': ['sp=10'] * 100 + ['sp=4'] * 100 + ['sp=6'] * 100 + ['sp=8'] * 100
})

# Define colors for each line
color_map = {
    'sp=10': 'blue',
    'sp=4': 'green',
    'sp=6': 'orange',
    'sp=8': 'red'
}

# Plot
plt.figure(figsize=(10, 6))

for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['EPV'],
             linestyle='-',  # solid lines only
             color=color_map[label],
             label=label)

# Axis labels and legend
plt.xlabel('g')
plt.ylabel('E.P.V')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 10(c)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Generate g values
g = np.linspace(7.59, 7.62, 100)

# Define EPV lines according to your description
epv_10 = np.linspace(99.70, 100.22, 100)
epv_4  = np.linspace(99.95, 100.42, 100)
epv_6  = np.linspace(100.20, 100.70, 100)
epv_8  = np.linspace(100.58, 101.02, 100)

# Create DataFrame
df = pd.DataFrame({
    'g': np.tile(g, 4),
    'EPV': np.concatenate([epv_10, epv_4, epv_6, epv_8]),
    'Label': ['sp=10'] * 100 + ['sp=4'] * 100 + ['sp=6'] * 100 + ['sp=8'] * 100
})

# Define solid line colors
color_map = {
    'sp=10': 'blue',
    'sp=4': 'green',
    'sp=6': 'orange',
    'sp=8': 'red'
}

# Plot
plt.figure(figsize=(10, 6))

for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['EPV'],
             linestyle='-',
             color=color_map[label],
             label=label)

# Axis and legend
plt.xlabel('g')
plt.ylabel('E.P.V')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 10(d)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# g values
g = np.linspace(10.91, 10.95, 100)

# Define accurate EPV values
epv_10 = np.linspace(99.30, 99.63, 100)
epv_4  = np.linspace(99.45, 99.80, 100)
epv_6  = np.linspace(99.63, 100.00, 100)
epv_8  = np.linspace(99.83, 100.25, 100)

# Create DataFrame
df = pd.DataFrame({
    'g': np.tile(g, 4),
    'EPV': np.concatenate([epv_10, epv_4, epv_6, epv_8]),
    'Label': ['sp=10'] * 100 + ['sp=4'] * 100 + ['sp=6'] * 100 + ['sp=8'] * 100
})

# Define colors for each line
color_map = {
    'sp=10': 'blue',
    'sp=4': 'green',
    'sp=6': 'orange',
    'sp=8': 'red'
}

# Plot
plt.figure(figsize=(10, 6))

for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['EPV'],
             linestyle='-',  # solid lines only
             color=color_map[label],
             label=label)

# Axis labels and legend
plt.xlabel('g')
plt.ylabel('E.P.V')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 10(e)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# g values from 8.24 to 8.29
g = np.linspace(8.24, 8.29, 100)

# EPV values based on user specification
epv_10 = np.linspace(100.10, 100.50, 100)
epv_4  = np.linspace(100.60, 101.00, 100)
epv_6  = np.linspace(101.25, 101.70, 100)
epv_8  = np.linspace(102.20, 102.60, 100)

# Create DataFrame for plotting
df = pd.DataFrame({
    'g': np.tile(g, 4),
    'EPV': np.concatenate([epv_10, epv_4, epv_6, epv_8]),
    'Label': ['sp=10'] * 100 + ['sp=4'] * 100 + ['sp=6'] * 100 + ['sp=8'] * 100
})

# Define unique colors for each label
color_map = {
    'sp=10': 'blue',
    'sp=4': 'green',
    'sp=6': 'orange',
    'sp=8': 'red'
}

# Plot setup
plt.figure(figsize=(10, 6))

for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['EPV'],
             linestyle='-',
             color=color_map[label],
             label=label)

# Axis labels and legend
plt.xlabel('g')
plt.ylabel('E.P.V')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 10(f)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# g values from 12.30 to 12.34
g = np.linspace(12.30, 12.34, 100)

# EPV values from description
epv_10 = np.linspace(98.75, 99.10, 100)
epv_4  = np.linspace(99.10, 99.40, 100)
epv_6  = np.linspace(99.50, 99.80, 100)
epv_8  = np.linspace(99.98, 100.25, 100)

# Create DataFrame
df = pd.DataFrame({
    'g': np.tile(g, 4),
    'EPV': np.concatenate([epv_10, epv_4, epv_6, epv_8]),
    'Label': ['sp=10'] * 100 + ['sp=4'] * 100 + ['sp=6'] * 100 + ['sp=8'] * 100
})

# Define distinct colors
color_map = {
    'sp=10': 'blue',
    'sp=4': 'green',
    'sp=6': 'orange',
    'sp=8': 'red'
}

# Plot
plt.figure(figsize=(10, 6))

for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['EPV'],
             linestyle='-',
             color=color_map[label],
             label=label)

# Customize axes and legend
plt.xlabel('g')
plt.ylabel('E.P.V')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 11(a)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Generate g values
g = np.linspace(8.24, 8.29, 100)

# Approximate Break even fee values
msci = np.linspace(730, 950, 100)
sp = np.linspace(750, 970, 100)

# Create DataFrame
df = pd.DataFrame({
    'g': np.tile(g, 2),
    'BreakEvenFee': np.concatenate([msci, sp]),
    'Label': ['MSCI'] * 100 + ['S&P'] * 100
})

# Define color map
color_map = {
    'MSCI': 'blue',
    'S&P': 'green'
}

# Plot
plt.figure(figsize=(10, 6))

for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['BreakEvenFee'],
             linestyle='-',
             color=color_map[label],
             label=label)

# Labels and legend
plt.xlabel('g')
plt.ylabel('Break even fee')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 11(b)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Generate g values
g = np.linspace(12.30, 12.34, 100)

# Define break-even fees with upward curvature
# Using quadratic equations to match the curvature
msci = 83 + (g - 12.30) * (117 / 0.04) + (g - 12.30)**2 * (40 / 0.0016)
sp = 110 + (g - 12.30) * (111 / 0.04) + (g - 12.30)**2 * (60 / 0.0016)

# Create DataFrame
df = pd.DataFrame({
    'g': np.tile(g, 2),
    'BreakEvenFee': np.concatenate([msci, sp]),
    'Label': ['MSCI'] * 100 + ['S&P'] * 100
})

# Define colors for the lines
color_map = {
    'MSCI': 'blue',
    'S&P': 'green'
}

# Plot
plt.figure(figsize=(10, 6))

for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['BreakEvenFee'],
             linestyle='-',
             color=color_map[label],
             label=label)

# Labels, legend, and grid
plt.xlabel('g')
plt.ylabel('Break even fee')
plt.title('Break Even Fee vs g')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 11(c)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Generate g values
g = np.linspace(8.24, 8.29, 100)

# Quadratic equations to match curvature and value ranges
msci = 725 + (g - 8.24) * (240 / 0.05) + (g - 8.24)**2 * (10 / 0.0025)
sp   = 750 + (g - 8.24) * (230 / 0.05) + (g - 8.24)**2 * (15 / 0.0025)

# Combine data
df = pd.DataFrame({
    'g': np.tile(g, 2),
    'BreakEvenFee': np.concatenate([msci, sp]),
    'Label': ['MSCI'] * 100 + ['S&P'] * 100
})

# Color map
color_map = {
    'MSCI': 'blue',
    'S&P': 'green'
}

# Plot
plt.figure(figsize=(10, 6))

for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['BreakEvenFee'],
             linestyle='-',
             color=color_map[label],
             label=label)

# Labels and legend
plt.xlabel('g')
plt.ylabel('Break even fee')
plt.title('Break Even Fee vs g')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 11(d)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Generate g values
g = np.linspace(12.30, 12.34, 200)
g_mid = (g[0] + g[-1]) / 2

# Linear trend + convex curvature
def create_curve(start, end, bump_height):
    base = np.linspace(start, end, len(g))
    curvature = -bump_height * ((g - g_mid) ** 2) / ((g[-1] - g[0]) / 2) ** 2
    return base - curvature  # minus for convex upwards

# Curves with clearly visible but smooth convex shape
msci = create_curve(85, 200, bump_height=10)
sp = create_curve(110, 220, bump_height=12)

# Combine into DataFrame
df = pd.DataFrame({
    'g': np.tile(g, 2),
    'BreakEvenFee': np.concatenate([msci, sp]),
    'Label': ['MSCI'] * len(g) + ['S&P'] * len(g)
})

# Plot with solid lines and distinct colors
color_map = {'MSCI': 'blue', 'S&P': 'orange'}

plt.figure(figsize=(10, 6))
for label in df['Label'].unique():
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['BreakEvenFee'],
             linestyle='-',
             color=color_map[label],
             label=label)

# Axis and aesthetics
plt.xlabel('g')
plt.ylabel('Break even fee')
plt.title('Break Even Fee vs g (Smooth Convex Curves)')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 11(e)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Generate g values
g = np.linspace(7.585, 7.625, 200)
g_mid = (g[0] + g[-1]) / 2

# Define a smooth nonlinear convex curve
def fee_curve(start, end, bump=20):
    base = np.linspace(start, end, len(g))
    curve = base + bump * ((g - g_mid) ** 2) / ((g[-1] - g[0]) / 2) ** 2
    return curve

# Define curves
with_surrender = fee_curve(450, 940, bump=12)
without_surrender = with_surrender + 5  # Slightly higher

# Combine data
df = pd.DataFrame({
    'g': np.tile(g, 2),
    'BreakEvenFee': np.concatenate([with_surrender, without_surrender]),
    'Label': ['with Surrender'] * len(g) + ['without Surrender'] * len(g)
})

# Plot
plt.figure(figsize=(10, 6))
for label, style in zip(df['Label'].unique(), ['-', '--']):
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['BreakEvenFee'],
             linestyle=style,
             color='blue',
             label=label)

# Formatting
plt.xlabel('g')
plt.ylabel('Break even fee')
plt.title('Break Even Fee vs g (Nikkei Age 60)')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()

#Figure 11(f)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Generate g values
g = np.linspace(10.91, 10.95, 200)
g_mid = (g[0] + g[-1]) / 2

# Define smooth convex curves
def generate_curve(start, end, bump=15):
    base = np.linspace(start, end, len(g))
    curve = base + bump * ((g - g_mid) ** 2) / ((g[-1] - g[0]) / 2) ** 2
    return curve

# Data for both lines
with_surrender = generate_curve(20, 295, bump=10)
without_surrender = with_surrender + 5  # slightly above

# Combine into DataFrame
df = pd.DataFrame({
    'g': np.tile(g, 2),
    'BreakEvenFee': np.concatenate([with_surrender, without_surrender]),
    'Label': ['with surrender'] * len(g) + ['without surrender'] * len(g)
})

# Plot
plt.figure(figsize=(10, 6))
for label, style in zip(df['Label'].unique(), ['-', '--']):
    subset = df[df['Label'] == label]
    plt.plot(subset['g'], subset['BreakEvenFee'],
             linestyle=style,
             color='green',
             label=label)

# Labels and styling
plt.xlabel('g')
plt.ylabel('Break even fee')
plt.title('Break Even Fee vs g (Nikkei Age 65)')
plt.legend(title='Label')
plt.grid(True)
plt.tight_layout()
plt.show()